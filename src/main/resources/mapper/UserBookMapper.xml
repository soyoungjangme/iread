<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.iread.mapper.UserBookMapper">

<!--  북노트 목록  -->
    <select id="getMyBookNote" resultMap="BookNoteMap">
        select bn.*, b.title, b.image
        from book_note bn
        join books b on b.book_no = bn.book_no
        order by
            case
                when bn.end_date is null then 0
                else 1
            end,
            bn.start_date desc,
            bn.end_date desc
    </select>

    <resultMap id="BookNoteMap" type="com.project.iread.dto.BookNoteDTO">
        <id property="bookNoteNo" column="book_note_no" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="bookNo" column="book_no" />
        <result property="userNo" column="user_no" />

        <result property="title" column="title" />
        <result property="image" column="image" />
    </resultMap>

<!--  북노트 도서검색  -->
    <select id="getSearchResult" parameterType="string" resultType="com.project.iread.dto.BookDTO">
        select book_no, title, author, image from books
        where title like concat('%', #{keyword}, '%')
            or author like concat('%', #{keyword}, '%')
    </select>

<!--  독서기록 시작하기  -->
    <insert id="createBookTable" parameterType="com.project.iread.dto.BookNoteDTO" useGeneratedKeys="true" keyProperty="bookNoteNo">
        insert into book_note(start_date, book_no)
        values(#{startDate}, #{bookNo})
    </insert>

<!--  독서기록 저장하기  -->
    <insert id="insertChapter" parameterType="com.project.iread.dto.ChapterDTO">
        insert into per_chapter(chapter_no,
                                chapter_title,
                                chapter_content,
                                book_note_no)
        values (#{chapterNo},
                #{chapterTitle},
                #{chapterContent},
                #{bookNoteNo})
    </insert>

<!--  기존챕터 업데이트 -->
    <update id="updateChapter" parameterType="com.project.iread.dto.ChapterDTO">
        update per_chapter
        set chapter_title = #{chapterTitle},
            chapter_content = #{chapterContent}
        where per_chapter_no = #{perChapterNo}
    </update>

<!--  챕터 삭제  -->
    <delete id="deleteChapter" parameterType="long">
        delete from per_chapter
        where per_chapter_no = #{perChapterNo}
    </delete>

<!--  기존BookNote 호출  -->
    <select id="bookNoteDetail" parameterType="map" resultMap="BookNoteMap">
        select bn.*, b.title
        from book_note bn
        join books b on b.book_no = bn.book_no
        where bn.book_no = #{bookNo}
            and bn.book_note_no = #{bookNoteNo}
    </select>

<!--  기존북노트 per_chapter호출  -->
    <select id="getChapterData" parameterType="int" resultType="com.project.iread.dto.ChapterDTO">
        select * from per_chapter
        where book_note_no = #{bookNoteNo}
    </select>

<!--  기존북노트 per_page호출  -->
    <select id="getPageData" parameterType="int" resultType="com.project.iread.dto.PageDTO">
        select * from per_page
        where book_note_no =#{bookNoteNo}
    </select>

    <insert id="insertPage" parameterType="com.project.iread.dto.PageDTO">
        insert into per_page(page_index,
                            start_page,
                            end_page,
                            page_content,
                            book_note_no)
        values (#{pageIndex},
                #{startPage},
                #{endPage},
                #{pageContent},
                #{bookNoteNo})
    </insert>

    <update id="updatePage" parameterType="com.project.iread.dto.PageDTO">
        update per_page
        set start_page = #{startPage},
            end_page = #{endPage},
            page_content = #{pageContent}
        where per_page_no = #{perPageNo}
    </update>

    <delete id="deletePage" parameterType="long">
        delete from per_page
        where per_page_no = #{perPageNo}
    </delete>

<!--  리뷰등록&key반환  -->
    <insert id="insertReview" parameterType="com.project.iread.dto.ReviewDTO" useGeneratedKeys="true" keyProperty="reviewNo">
        insert into reviews(review_short,
                            review_text,
                            review_reg_date,
                            review_open_status,
                            book_no,
                            book_note_no)
        values (#{reviewShort},
                #{reviewText},
                #{reviewRegDate},
                #{reviewOpenStatus},
                #{bookNo},
                #{bookNoteNo})
    </insert>

<!--  리뷰이미지 등록  -->
    <insert id="insertReviewImg" parameterType="map">
        insert into review_img(review_img_url, review_no)
        values
        <foreach collection="reviewImgs" item="img" separator=",">
            (#{img.reviewImgURL}, #{reviewNo})
        </foreach>
    </insert>

<!--  리뷰이미지 삭제  -->
    <delete id="deleteReviewImg" parameterType="long">
        delete from review_img
        where review_img_no = #{reviewImgNo}
    </delete>

<!--  리뷰호출_북노트  -->
    <select id="getReviewData" parameterType="int" resultType="com.project.iread.dto.ReviewDTO">
        select * from reviews
        where book_note_no = #{bookNoteNo}
    </select>

    <select id="getReviewImgData" parameterType="long" resultType="com.project.iread.dto.ReviewImgDTO">
        select * from review_img
        where review_no = #{reviewNo}
    </select>

<!--  리뷰내용 수정  -->
    <update id="updateReview" parameterType="com.project.iread.dto.ReviewDTO">
        update reviews
        set review_short = #{reviewShort},
            review_text = #{reviewText},
            review_open_status = #{reviewOpenStatus}
        where review_no = #{reviewNo}
    </update>

<!-- 북노트종료일 입력 -->
    <insert id="endBookNote" parameterType="com.project.iread.dto.BookNoteDTO">
        update book_note
        set end_date = #{endDate}
        where book_note_no = #{bookNoteNo}
    </insert>
</mapper>