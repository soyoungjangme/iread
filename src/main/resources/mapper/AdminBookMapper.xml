<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.iread.mapper.AdminMapper">

    <select id="getIsbn" resultType="string">
        select isbn
        from books
    </select>

    <insert id="registBook" parameterType="com.project.iread.dto.BookDTO">
        insert into books(
                        isbn,
                        title,
                        link,
                        image,
                        author,
                        discount,
                        publisher,
                        pubdate,
                        description,
                        genre_no)
        values(
            #{isbn},
            #{title},
            #{link},
            #{image},
            #{author},
            #{discount},
            #{publisher},
            #{pubdate},
            #{description},
            #{genreNo})

    </insert>
    
<!--  모든 도서 개수 호출  -->
    <select id="totalCount" resultType="long">
        select count(*)
        from books
        where book_activated = 'Y'
    </select>

<!--  모든 도서 목록 호출  -->
    <select id="getAllBook" resultMap="booksMap">
        select b.*,
            g.genre_name,
            count(distinct r.review_no) as review_cnt,
            count(distinct bl.user_no) as book_like_cnt
        from books b
        left join genres g on g.genre_no = b.genre_no
        left join reviews r on r.book_no = b.book_no
        left join book_likes bl on bl.book_no = b.book_no
        where b.book_activated = 'Y'
        group by b.book_no
        order by b.reg_date desc
        limit #{pageSize} offset #{offset}
    </select>

    <resultMap id="booksMap" type="com.project.iread.dto.BookDTO">
        <id property="bookNo" column="book_no"/>
        <result property="isbn" column="isbn"/>
        <result property="title" column="title"/>
        <result property="link" column="link"/>
        <result property="image" column="image"/>
        <result property="author" column="author"/>
        <result property="discount" column="discount"/>
        <result property="publisher" column="publisher"/>
        <result property="pubdate" column="pubdate"/>
        <result property="description" column="description"/>
        <result property="bookLike" column="book_like"/>
        <result property="bookActivated" column="book_activated"/>
        <result property="genreNo" column="genre_no"/>
        <result property="genreName" column="genre_name"/>

        <result property="reviewCnt" column="review_cnt" />
        <result property="bookLikeCnt" column="book_like_cnt" />
    </resultMap>


<!--  검색 도서 개수 호출  -->
    <select id="searchTotalCount" parameterType="string" resultType="long">
        select count(*) from books b
        where (b.title like concat ('%', #{keyword}, '%')
            or b.author like concat ('%', #{keyword}, '%')
            or b.publisher like concat ('%', #{keyword}, '%'))
            and b.book_activated = 'Y'
    </select>

<!--  도서목록_검색호출  -->
    <select id="getSearchBook" parameterType="map" resultMap="booksMap">
        select b.*, g.genre_name from books b
        left join genres g on g.genre_no = b.genre_no
        where (b.title like concat ('%', #{keyword}, '%')
            or b.author like concat ('%', #{keyword}, '%')
            or b.publisher like concat ('%', #{keyword}, '%'))
            and b.book_activated = 'Y'
        order by b.reg_date desc
        limit #{pageSize} offset #{offset}
    </select>

<!--  도서목록_삭제  -->
    <delete id="deleteBook" parameterType="long">
        delete from books
        where book_no = #{bookNo}
    </delete>

<!--  장르등록  -->
    <insert id="registGenre" parameterType="list">
        insert into genres(genre_name)
        values
        <foreach item="item" collection="list" separator=",">
            (#{item.genreName})
        </foreach>
    </insert>

<!--  장르삭제  -->
    <delete id="deleteGenre" parameterType="list">
        delete from genres
        where genre_name in
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item.genreName}
            </foreach>
    </delete>

<!--  장르호출  -->
    <select id="getGenre" resultType="com.project.iread.dto.GenreDTO">
        select *
        from genres
    </select>

<!--  삭제하려는 장르 중 등록된 도서가 있는지  -->
    <select id="countBooksByGenreName" parameterType="string" resultType="int">
        select count(*) from books
        where genre_no = (
            select genre_no from genres
            where genre_name = #{genreName}
        )
    </select>

    <!--모든회원정보호출-->
    <select id="getUserInfo" resultMap="userInfoMap">
        select users.user_no,
            users.user_name,
            users.user_nick,
            user_phone,
            users.user_reg_date,
            users.user_birth,
            users.user_activated_yn,
            count(distinct bn.book_no) as book_note_cnt,
            count(distinct r.review_no) as review_cnt
        from users
        left join book_note bn on bn.user_no = users.user_no
        left join reviews r on r.user_no = users.user_no
        <where>
            <if test="userActivatedYN != null and userActivatedYN != ''">
                users.user_activated_yn = #{userActivatedYN}
            </if>
            <if test="keyword != null and keyword != ''">
                (users.user_name like CONCAT('%', #{keyword}, '%')
                or users.user_nick like CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        group by users.user_no
        order by users.user_reg_date desc
    </select>

    <resultMap id="userInfoMap" type="com.project.iread.dto.UserDTO">
        <result column="user_no" property="userNo" />
        <result column="user_name" property="userName" />
        <result column="user_nick" property="userNick" />
        <result column="user_phone" property="userPhone" />
        <result column="user_birth" property="userBirth" />
        <result column="user_reg_date" property="userRegDate" />
        <result column="user_activated_yn" property="userActivatedYN" />
        <result column="book_note_cnt" property="bookNoteCnt" />
        <result column="review_cnt" property="reviewCnt" />
    </resultMap>

    <!--유저활동상태변경-->
    <update id="changeUserState">
        update users
        set user_activated_yn = #{userActivatedYN}
        where user_no = #{userNo}
    </update>

    <!--신고받은 리뷰 호출-->
    <select id="getComplaintReview" resultMap="complaintReviewsMap">
        select r.review_no,
            r.review_text,
            r.review_reg_date,
            r.review_complaint_cnt,
            r.review_open_yn,
            u.user_nick,
            r.book_no,
            b.title
        from reviews r
        join users u on u.user_no = r.user_no
        join books b on b.book_no = r.book_no
        <where>
            r.review_complaint_cnt > 0
            <if test="reviewOpenYN != null and reviewOpenYN != ''">
                and r.review_open_yn = #{reviewOpenYN}
            </if>
            <if test="keyword != null and keyword != ''">
                and (b.title LIKE CONCAT('%', #{keyword}, '%')
                OR u.user_nick LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
    </select>

    <resultMap id="complaintReviewsMap" type="com.project.iread.dto.ReviewDTO">
        <id property="reviewNo" column="review_no" />
        <result property="reviewText" column="review_text" />
        <result property="reviewRegDate" column="review_reg_date" />
        <result property="reviewComplaintCnt" column="review_complaint_cnt" />
        <result property="reviewOpenYN" column="review_open_yn" />
        <result property="bookNo" column="book_no" />
        <result property="userNo" column="user_no" />

        <result property="title" column="title" />
        <result property="userNick" column="user_nick" />
    </resultMap>

    <!--리뷰공개상태변경-->
    <update id="changeReviewStatus" parameterType="map">
        update reviews
        set review_open_yn = #{reviewOpenYN}
        where review_no = #{reviewNo}
    </update>



</mapper>